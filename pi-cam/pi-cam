#!/bin/bash
#
# pi-cam -- a simple camera monitor
#
# Author: Hamish Cunningham <hamish@gate.ac.uk>
# This code is copyright Hamish Cunningham and the University of Sheffield
# and is licenced under GPL 3 or any later version.
#
### BEGIN INIT INFO
# Provides:          pi-cam
# Short-Description: Pi-Cam: a simple camera monitor daemon
# Description:       This script is implements the daemon for
#                    Pi-Cam (a simple camera monitor)
### END INIT INFO

# standard locals
P="$0"
USAGE="`basename ${P}` [-h(elp)] [-d(ebug)] [-c(li mode)]"
OPTIONSTRING=hdc

# define LSB log_* functions.
. /lib/lsb/init-functions

# message & exit if exit num present
usage() { log_failure_msg Usage: $USAGE; [ ! -z "$1" ] && exit $1; }

# defaults
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="Pi-Cam: a simple camera monitor daemon"
NAME=pi-cam
DNAME=pi-camd
DAEMON=/usr/sbin/$NAME
PIDFILE=/var/run/$DNAME.pid
SHUTDOWN='shutdown -h now'

# options defaults
DEBUG=off
CLI=off

# process options
[ ! -z "$*" ] && log_daemon_msg ${NAME} options: $*
while getopts $OPTIONSTRING OPTION
do
  case $OPTION in
    h)	usage 1 ;;
    d)	DEBUG=on ;;
    c)	CLI=on ;;
    *)	usage 2 ;;
  esac
done 
shift `expr $OPTIND - 1`

# command-line mode
if [ $CLI == on ]
then
  logger=echo
  log_failure_msg=echo
  log_daemon_msg=echo
  logger "${NAME}: running in command-line mode"
fi

# read configuration variable file if it is present
if [ $CLI == on ]
then
  . ./${DNAME}.default
elif [ -r /etc/default/$DNAME ] 
then
  . /etc/default/$DNAME
else
  logger "${NAME}: no config data found - fatal error"
  exit 1
fi

# pretty date/time function
pdate() { date "+%Y-%m-%d-%T" |sed 's,:,,g'; }

# tell the world
logger "=========== ${NAME}: running at `pdate` ==========="

# check for gpio command (which may be a function defined in config)
GPIO=
if [ "`type -t gpio`" = "function" ]
then
  GPIO=gpio
else
  GPIO=`which gpio`
fi
if [ -z "${GPIO}" ]
then
  log_failure_msg "${NAME}: cannot find gpio command: failing" >&2
  logger          "${NAME}: cannot find gpio command: failing"
  exit 1
fi

# put the relevant pins into pull-up mode
gpio mode $GVID up
gpio mode $GPIC up
gpio mode $GPWR up

# handler for power off switch events
handle-gpwr() {
  logger "${NAME}: shutting down in $SHUTDELAY seconds (POWER_OFF)"
  sleep $SHUTDELAY
  bash -c "$SHUTDOWN"
  exit 0
}

# handler for take-a-pic switch events
handle-gpic() {
  gpio wfi $GVID both
  GVID_STATE=`gpio read $GVID`

  if [ $GVID_STATE == $GVID_VIDEO ]
  then
    # TODO take a video
    logger "${NAME}: oops, video not implemented yet :-("
  else
    take-a-still-picture
  fi

# # wait for the next state change
# handle-gpic &
}

# function to take a still
take-a-still-picture() {
  NOW=`pdate`
  IMAGE_FILE=${NOW}.jpg
  IMAGE_PATH=${WEB_HOME}/${IMAGE_FILE}
  logger "${NAME} taking picture ${PICS_TAKEN} to ${IMAGE_PATH}"
  CAM_OUTPUT="`raspistill -t ${TIMEOUT} -o $IMAGE_PATH 2>&1`"
  [ $? != 0 -o $DEBUG = on ] && \
    logger "${NAME}: cam output is \n${CAM_OUTPUT}\n"
  PICS_TAKEN=`expr $PICS_TAKEN + 1`

# TODO convert in.jpg -interpolate average16 -interpolative-resize 25% out.jpg
  convert -thumbnail 75  ${IMAGE_PATH} ${THUMBS}/075-${IMAGE_FILE} &
  convert -thumbnail 500 ${IMAGE_PATH} ${THUMBS}/500-${IMAGE_FILE} &

  MARKUP="<p>${NOW}<br/><a href=\"${IMAGE_FILE}\" alt=\"${IMAGE_FILE}\"><img"
  MARKUP="${MARKUP} src=\"thumbs/500-${IMAGE_FILE}\"></a><br/></p><hr/>"
  echo "${MARKUP}" >/tmp/${NAME}-$$.txt
  sed -i "/NEW PIC GOES HERE/ r /tmp/${NAME}-$$.txt" ${INDEX}
  rm /tmp/${NAME}-$$.txt
}

# do the work; i and j index loop iterations for e.g. logging
i=0; j=0
PICS_TAKEN=0
while :
do
  i=`expr ${i} + 1`; j=`expr ${j} + 1`

  # run the handlers that wait for user input
  handle-gpwr &
  handle-gpic

  # routine log messages
  [ ${j} -eq ${LOG_INTERVAL} ] && \
    logger "${NAME}: ${PICS_TAKEN} taken by `pdate` (i=${i})" && j=0

  # let the poor beast rest... for tenth of a second
  sleep 0.1
done &

# create PIDFILE
echo $! >${PIDFILE}

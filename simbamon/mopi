#!/bin/bash
#
# mopi - configuration tool for http://pi.gate.ac.uk/mopi
#
# Author: Hamish Cunningham <hamish@gate.ac.uk>
# This code is copyright Hamish Cunningham and the University of Sheffield
# and is licenced under GPL 3 or any later version.
#
# Ideas and idioms borrowed from
# https://github.com/asb/raspi-config/blob/master/raspi-config
# (thanks Alex & co!)

# standard locals
P="$0"
USAGE="`basename ${P}` [-h(elp)] [-d(ebug)] [-v(ersion)]"
OPTIONSTRING=hdv
alias cd='builtin cd'
DBG=:

# specific locals
DNAME=simbamond
CONFIG=
INST_DIR=`dirname ${P}`
CLI=${INST_DIR}/mopicli

# message & exit if exit num present
usage() { echo -e Usage: $USAGE; [ ! -z "$1" ] && exit $1; }

# we do all changes to a copy of /etc/default/simbamond (in ~/.config/mopi)
# and only push back into /etc/ when the user says "apply"; the next code
# block checks location of these files, sets up ~/.config/mopi if it doesn't
# exist yet, and copies the current state of the /etc config

### TODO
# turns out that the firmware will not persist config changes, so we need to
# do this, and we need the daemon to write any non-standard config to the
# firmware as soon as it is invoked

if [ -r ${INST_DIR}/${DNAME}.default ]  # development mode
then
  CONFIG=${INST_DIR}/${DNAME}.default
elif [ -r /etc/default/$DNAME ]
then
  CONFIG=/etc/default/$DNAME
else
  echo "${P}: cannot find ${DNAME} config" >&2
  usage 2
fi
CONFIG_COPY_DIR=${HOME}/.config/mopi
CONFIG_COPY=$CONFIG_COPY_DIR/config-copy
[ -d ${CONFIG_COPY_DIR} ] || mkdir -p ${CONFIG_COPY_DIR}
[ -f ${CONFIG_COPY} ] && mv ${CONFIG_COPY} ${CONFIG_COPY}.bak
cp $CONFIG $CONFIG_COPY

# load current config
source $CONFIG

# process options
while getopts $OPTIONSTRING OPTION
do
  case $OPTION in
    h)	usage 0 ;;
    v)	echo $P is at version $VERSION; exit 0 ;;
    d)	DBG=echo ;;
    *)	usage 1 ;;
  esac
done 
shift `expr $OPTIND - 1`

# does mopicli work?
if [ $DBG = echo ]
then
  echo skipping ${CLI} test as in debug mode
else
  echo testing ${CLI}...
  sudo ${CLI} -s || {
    echo "${P}: ${CLI} not working; installation problem?" >&2
    usage 3
  }
  echo ...done
fi

# figure out optimal size for whiptail
calc_wt_size() {
  WT_HEIGHT=24
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-6))
}
calc_wt_size

# menu actions etc.
do_diff() {
  clear
  (
    echo Diffing ${CONFIG} with ${CONFIG_COPY}...; echo
    diff $* ${CONFIG} ${CONFIG_COPY}
    echo; echo Hit return to continue
  ) |more
  read
  clear
}
do_status() {
  [ $DBG = echo ] && STATUS="unavailable, no CLI" && echo $STATUS && return
  STATUS="`sudo ${CLI} -sv`"
  STATUS="${STATUS}; `sudo ${CLI} -s`"
  STATUS="${STATUS}; `sudo ${CLI} -v`"
  echo $STATUS
}
do_about() {
  whiptail --msgbox "\
    This is a configuration tool for MoPi
    (mobile and 24/7 power for the Raspberry Pi).

    See http://pi.gate.ac.uk/mopi for details.\
    " 20 70 1
}

# second-level menu
do_supply_config() {
  # process options
  SETTING=both
  case $1 in
    -b) SETTING="both supplies" ;;
    -1) SETTING="supply 1" ;;
    -2) SETTING="supply 2" ;;
  esac

  # what type of supply?
  BACKTITLE="Configuring MoPi power supplies (${SETTING})..."
  TITLE='Specify Supply Type'
  C="whiptail --title \"${TITLE}\" --backtitle \"${BACKTITLE}\" \
       --radiolist \"Specify type (for ${SETTING}):\" \
       $WT_HEIGHT $(( $WT_WIDTH / 2 + 9 )) $WT_MENU_HEIGHT \
       --cancel-button \"Cancel\" --ok-button \"Next\" \
       "${SUPPLY_TYPE_A[@]}" "
  SUPPLY_TYPE=`bash -c "${C} 3>&1 1>&2 2>&3"`
  RET=$?
  [ $RET -eq 1 ] && return 0
  [ $RET -eq 0 ] && \
    [ $SUPPLY_TYPE -ge 1 -a $SUPPLY_TYPE -le `supply_type_max` ] || {
       whiptail --msgbox "Error: unrecognized option ${SUPPLY_TYPE}" 20 60 1
        return 1
    }

  # if we're on batteries...
  if [ $SUPPLY_TYPE = 1 -o $SUPPLY_TYPE = 2 ]
  then
    # get number of cells
    TITLE='Specify Number of Cells'
    C="whiptail --title \"${TITLE}\" --backtitle \"${BACKTITLE}\" \
         --radiolist \"Specify number of cells (for ${SETTING}):\" \
         $WT_HEIGHT $(( $WT_WIDTH / 2 + 9 )) $WT_MENU_HEIGHT \
         --cancel-button \"Cancel\" --ok-button \"Next\" \
         "${NUM_CELLS_A[@]}" "
    NUM_CELLS=`bash -c "${C} 3>&1 1>&2 2>&3"`
    RET=$?
    [ $RET -eq 1 ] && return 0
    [ $RET -eq 0 ] && \
      [ $NUM_CELLS -ge 1 -a $NUM_CELLS -le `num_cells_max` ] || {
        whiptail --msgbox "Error: unrecognized option ${NUM_CELLS}" 20 60 1
        return 1
      }

    # get chemistry
    TITLE='Specify Battery Chemistry'
    C="whiptail --title \"${TITLE}\" --backtitle \"${BACKTITLE}\" \
         --radiolist \"Specify battery chemistry (for ${SETTING}):\" \
         $WT_HEIGHT $(( $WT_WIDTH / 2 + 9 )) $WT_MENU_HEIGHT \
         --cancel-button \"Cancel\" --ok-button \"Next\" \
         "${BAT_CHEMISTRY_A[@]}" "
    CHEMISTRY=`bash -c "${C} 3>&1 1>&2 2>&3"`
    RET=$?
    [ $RET -eq 1 ] && return 0
    [ $RET -eq 0 ] && \
      [ $CHEMISTRY -ge 1 -a $CHEMISTRY -le `bat_chemistry_max` ] || {
        whiptail --msgbox "Error: unrecognized option ${CHEMISTRY}" 20 60 1
        return 1
      }
  fi

  # hokus pokus agracadabra, etc.
  calculate_config $SUPPLY_TYPE $NUM_CELLS $CHEMISTRY
# TODO sanity check -- e.g. if floor is below MOPI_OPERATING_FLOOR

  # offer to edit config values (advanced)
  # TODO
  whiptail --msgbox "
    The configuration for your supply has been calculated as:

      type: $SUPPLY_TYPE; floor: $BAT_FLOOR; good: $BAT_GOOD; full: $BAT_FULL

      (type: ${CONFIG_A[type]} floor: ${CONFIG_A[floor]}
       good: ${CONFIG_A[good]} full: ${CONFIG_A[full]})

    (supply type: $(supply_type ${SUPPLY_TYPE}))
    (number of cells: $(num_cells ${NUM_CELLS}))
    (chemistry: $(bat_chemistry ${CHEMISTRY}))
  " 20 70 1

  # confirm config and offer to write to MoPi
  # TODO

}

# main loop
STATUS="`do_status`"
while true; do
  SEL=$(whiptail --title "MoPi Configuration Tool (mopi)" \
    --menu "Current status: ${STATUS}" \
      $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
    --cancel-button Finish --ok-button Select \
      "1 Configure Both"        "Configure both power supplies" \
      "2 Configure Supply 1"    "Configure supply 1" \
      "3 Configure Supply 2"    "Configure supply 2" \
      "4 Show Changes"          "Show config changes (not yet applied)" \
      "5 Show Changes (Wide)"   "Show config changes (side-by-side view)" \
      "6 Status"                "Show current status from your MoPi board" \
      "7 About MoPi"            "Information about this configuration tool" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    exit 0
  elif [ $RET -eq 0 ]; then
    case "$SEL" in
      1\ *) do_supply_config -b ;;
      2\ *) do_supply_config -1 ;;
      3\ *) do_supply_config -2 ;;
      4\ *) do_diff ;;
      5\ *) do_diff -y ;;
      6\ *) STATUS="`do_status`";
            whiptail --msgbox "${STATUS}" 20 60 1 ;;
      7\ *) do_about ;;
      *)    whiptail --msgbox "Error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SEL" 20 60 1
  else
    exit 1
  fi
done

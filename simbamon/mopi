#!/bin/bash
#
# mopi - configuration tool for http://pi.gate.ac.uk/mopi
#
# Author: Hamish Cunningham <hamish@gate.ac.uk>
# This code is copyright Hamish Cunningham and the University of Sheffield
# and is licenced under GPL 3 or any later version.
#
# Ideas and idioms borrowed from
# https://github.com/asb/raspi-config/blob/master/raspi-config
# (thanks Alex & co!)

# standard locals
P="$0"
USAGE="`basename ${P}` [-h(elp)] [-d(ebug)]"
OPTIONSTRING=hd
alias cd='builtin cd'
DBG=:

# specific locals
DNAME=simbamond
CONFIG=
CLI=./mopicli

# message & exit if exit num present
usage() { echo -e Usage: $USAGE; [ ! -z "$1" ] && exit $1; }

# process options
while getopts $OPTIONSTRING OPTION
do
  case $OPTION in
    h)	usage 0 ;;
    d)	DBG=echo ;;
    *)	usage 1 ;;
  esac
done 
shift `expr $OPTIND - 1`

# we do all changes to a copy of /etc/default/simbamond (in ~/.config/mopi)
# and only push back into /etc/ when the user says "apply"; the next code
# block checks location of these files, sets up ~/.config/mopi if it doesn't
# exist yet, and copies the current state of the /etc config
if [ -r ./${DNAME}.default ]  # development mode
then
  CONFIG=./${DNAME}.default
elif [ -r /etc/default/$DNAME ]
then
  CONFIG=/etc/default/$DNAME
else
  echo "${P}: cannot find ${DNAME} config" >&2
  usage 2
fi
CONFIG_COPY_DIR=${HOME}/.config/mopi
CONFIG_COPY=$CONFIG_COPY_DIR/config-copy
[ -d ${CONFIG_COPY_DIR} ] || mkdir -p ${CONFIG_COPY_DIR}
[ -f ${CONFIG_COPY} ] && mv ${CONFIG_COPY} ${CONFIG_COPY}.bak
cp $CONFIG $CONFIG_COPY

# does mopicli work?
sudo ${CLI} >/dev/null || {
  echo "${P}: ${CLI} not working; installation problem?" >&2
  usage 3
}

# get current config state
parse_config() {
  for l in `grep '^[A-Z][A-Z]*=' $CONFIG_COPY`
  do
    # TODO
    echo $l
  done
}

# menu actions etc.
do_diff() {
  clear
  (
    echo Diffing ${CONFIG} with ${CONFIG_COPY}...; echo
    diff $* ${CONFIG} ${CONFIG_COPY}
    echo; echo Hit return to continue
  ) |more
  read
  clear
}
do_status() {
  STATUS="`sudo ${CLI} -sv`"
  STATUS="${STATUS}; `sudo ${CLI} -s`"
  STATUS="${STATUS}; `sudo ${CLI} -v`"
  echo $STATUS
}

# figure out optimal size for whiptail
calc_wt_size() {
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-8))
}
calc_wt_size

# an about box
do_about() {
  whiptail --msgbox "\
    This is a configuration tool for MoPi
    (mobile and 24/7 power for the Raspberry Pi).

    See http://pi.gate.ac.uk/mopi for details.\
    " 20 70 1
}

# parting is such sweet sorrow
do_finish() {
  exit 0
}

# second-level menu
do_advanced_menu() {
  FUN=$(whiptail --title "MoPi Configuration Tool (mopi)" \
    --menu "Advanced Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
    --cancel-button "Back" --ok-button "Select" \
      "A1 Blah" "Blah blah" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      A1\ *) do_something_advanced ;;
      *)     whiptail --msgbox "Error: unrecognized option" 20 60 1 ;;
    esac ||  whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

# main loop
STATUS="`do_status`"
while true; do
  FUN=$(whiptail --title "MoPi Configuration Tool (mopi)" \
    --menu "Current status: ${STATUS}" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
    --cancel-button Finish --ok-button Select \
      "1 Blah" "Blah blah" \
      "2 Show Changes" "Show config changes (not yet applied)" \
      "3 Show Changes (Wide)" "Show config changes (side-by-side view)" \
      "7 Refresh" "Refresh current status" \
      "8 Advanced Options" "Configure advanced settings" \
      "9 About MoPi" "Information about this configuration tool" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_something ;;
      2\ *) do_diff ;;
      3\ *) do_diff -y ;;
      7\ *) STATUS="`do_status`" ;;
      8\ *) do_advanced_menu ;;
      9\ *) do_about ;;
      *)    whiptail --msgbox "Error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done

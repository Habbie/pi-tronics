#!/bin/bash
#
# simbamon -- a simple battery monitor
#
# Author: Hamish Cunningham <hamish@gate.ac.uk>
# This code is copyright Hamish Cunningham and the University of Sheffield
# and is licenced under GPL 3 or any later version.
#
### BEGIN INIT INFO
# Provides:          simbamon
# Short-Description: SimBaMon: a simple battery monitor daemon
# Description:       This script is implements the daemon for
#                    SimBaMon (a simple battery monitor)
### END INIT INFO

# standard locals
P="$0"
USAGE="`basename ${P}` [-h(elp)] [-d(ebug)] [-v(ersion)]"
OPTIONSTRING=hdv

# define LSB log_* functions.
. /lib/lsb/init-functions

# message & exit if exit num present
usage() { log_action_msg Usage: $USAGE; [ ! -z "$1" ] && exit $1; }

# defaults
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="SimBaMon: a simple battery monitor daemon"
NAME=simbamon
DNAME=simbamond
DAEMON=/usr/sbin/$NAME
PIDFILE=/var/run/$DNAME.pid
LMESS='battery level'
SHUTDOWN='shutdown -h now'
INST_DIR=`dirname ${P}`
CLI=${INST_DIR}/mopicli

# options defaults
DEBUG=off

# read configuration variable file if it is present
if [ -r /etc/default/$DNAME ] 
then
  . /etc/default/$DNAME
elif [ -r ./$DNAME.default ]
then
  . ./$DNAME.default
else
  logger "$0: no config data found - fatal error"
  exit 1
fi

# process options
[ ! -z "$*" ] && log_daemon_msg ${NAME} options: $*
while getopts $OPTIONSTRING OPTION
do
  case $OPTION in
    h)	usage 1 ;;
    d)	DEBUG=on ;;
    v)  log_action_msg Version $VERSION; usage 0 ;;
    *)	usage 2 ;;
  esac
done 
shift $(( $OPTIND - 1 ))

# pretty date/time function
pdate() { date +%b-%d-%Y-%T; }

# tell the world
logger "=========== $0: running at `pdate` ==========="
logger "${NAME}: monitor frequency is ${MONITOR_FREQUENCY} seconds"
logger "${NAME}: DEBUG is ${DEBUG}"

# check mopicli installed and working
sudo ${CLI} -s || {
  echo "${P}: ${CLI} not working; installation problem?" >&2
  usage 3
}

# how many loops to wait between warnings when battery is low
WAIT_LOOPS=$(( $WARNING_INTERVAL / $MONITOR_FREQUENCY ))
PREVIOUS_WARNING=0

# i and j index loop iterations for controlling logging and messages
i=0; j=0

# infinite loop (backgrounded)
while :
do
  i=$(( ${i} + 1 )); j=$(( ${j} + 1 ))

  # on first boot read local config and write to MoPi if it differs from
  # existing. we delay work a little, in case the user wants to tell us
  # not to shutdown on critical battery, for example
  [ -z "$PREVIOUSLY_RUN" -a ! -f "$PREVIOUSLY_RUN_INDICATOR" ] && {
    PREVIOUSLY_RUN=true
    date > $PREVIOUSLY_RUN_INDICATOR 
    logger "${NAME}: first run after boot, sleeping for ${BOOT_DELAY}..."
    sleep $BOOT_DELAY
    logger "${NAME}: ...boot delay done"

    # TODO write_local_config
  }

  # get MoPi status
  BAT_LEVEL=`${CLI} -s`
  [ x$BAT_LEVEL = x ] && {
    logger "${NAME}: failed to get ${LMESS}: pausing and retrying"
    sleep $MONITOR_FREQUENCY
    continue
  }

  # log low levels (approx. once every 5 minutes unless debugging)
  [ "$DEBUG" = on -o $(( $i % 150 )) -eq 0 ] && {
    ( s_bat_low $BAT_LEVEL || s_bat_critical $BAT_LEVEL ) && \
      logger "${NAME}: ${LMESS} is at or below warning level (${BAT_LEVEL})"
  }

  # action states (shutdown or warn)
  if s_forced_shutdown $BAT_LEVEL
  then
    wall <<< "${NAME}: power off requested: shutting down now!!!"
    logger "${NAME}: shutting down (POWER_OFF)"
    bash -c "$SHUTDOWN"
  elif s_bat_critical $BAT_LEVEL
  then
    wall <<< "${NAME}: battery empty: shutting down now!!!"
    logger "${NAME}: shutting down (BAT_SHUTDOWN)"
    bash -c "$SHUTDOWN"
  elif s_bat_low $BAT_LEVEL
  then
    if [ $(( $PREVIOUS_WARNING - $i )) -ge $WAIT_LOOPS ]
    then
      PREVIOUS_WARNING=$i
      wall <<< "${NAME}: ${LMESS} is low! connect new battery or shut down"
      logger "${NAME}: BAT_WARNING (${BAT_LEVEL})"
    fi
  fi

  # routine log messages
  [ "$DEBUG" = on -o ${j} -eq ${LOG_INTERVAL} ] && \
    logger "${NAME}: ${LMESS} is ${BAT_LEVEL} at `pdate` (i=${i})" && j=0

  # take a break
  sleep ${MONITOR_FREQUENCY}
done &

# create PIDFILE
echo $! >${PIDFILE}

#!/usr/bin/env python
# mopicli .This tool is for interfacing with the MoPi battery power add-on
#   board for the Raspberry Pi. (http://pi.gate.ac.uk/mopi)

import sys
import mopiapi
import errno

# Version of mopicli
CLIVERSION=0.3

# Uses API version 0.2 for mopi firmware v3.03
APIVERSION=0.3

# Package version
VERSION=3.1+5

#commands = ['-fv', '-i', '-rc', '-rc1', '-rc2', '-rpon', '-rs', '-s', '-sn', '-sv', '-v', '-v1', '-v2', '-wc', '-wc1', '-wc2', '-wpon', '-ws']
commands =   ['-i', '-fv', '-sn', '-h', '-e', '-s', '-sv', '-v', '-v1', '-v2', \
	'-rc', '-rc1', '-rc2', '-rpon', '-rs', '-wc', '-wc1', '-wc2', '-wpon', '-ws']
parameters = [   1,     0,     0,    0,    0,    0,     0,    0,     0,     0, \
	    0,      0,      0,       0,     0,     5,      5,       5,      1,     1]

# add -L for labels for everything
# define them in the same ordered array 
# replace the help descriptions with the labels?


def shorthelp():
	print "Usage: mopicli [-h] [options]"
	print "This tool is for interfacing with the MoPi battery power add-on"
	print "  board 'for the Raspberry Pi. (http://pi.gate.ac.uk)"
	print "Package Version %s" % (VERSION)
	print "Version %0.1f, API %0.1f" % (CLIVERSION, mopiapi.getApiVersion())

def help():
	print "Miscellaneous:"
	print "  -i          I2C bus (default: %i)" % mopiapi.guessI2C()
	print "  -fv         Firmware version"
	print "  -sn         Serial number"
	print "  -h          Display this message"
	print "  -e          Read everything possible from the MoPi"
	print ""
	print "Status:"
	print "  -s          MoPi status word"
	print "  -sv         Verbose status"
	print "  -v          Current source voltage in mV"
	print "  -v1         Source #1 voltage in mV"
	print "  -v2         Source #2 voltage in mV"
	print ""
	print "Read configuration options:"
	print "  -rc         Combined source #1 and #2 configuration"
	print "  -rc1        Configuration of source #1"
	print "  -rc2        Configuration of source #2"
	print "  -rpon       Power on delay"
	print "  -rs         Shutdown delay"
	print ""
	print "Write configuration options:"
	print "  -wc t mV mV mV mV     Combined source #1 and #2 configuration"
	print "  -wc1 t mV mV mV mV    Configuration of source #1"
	print "  -wc2 t mV mV mV mV    Configuration of source #2"
	print "    Where t is \x1b[1m1\x1b[0m for batteries, \x1b[1m2\x1b[0m for PSU / DC adapter, and the four mV"
        print "      settings are the \x1b[1mmaximum\x1b[0m, \x1b[1mgood\x1b[0m, \x1b[1mlow\x1b[0m, and \x1b[1mcritical\x1b[0m voltage levels."
	print "  -wpon seconds         Power on delay seconds"
	print "  -ws seconds           Shutdown delay seconds"
	print ""
	print "All options may be used simultaneously. When doing so, they execute in the"
	print "  order they are listed in in this help message. However, only one of each may"
	print "  be used."

# read integer inputs to command c, with expected number of inputs
# if none are expected and there are some though, no biggy
def readInts(c, expected):
	ci = sys.argv.index(c) + 1
	data = []
	while ci < len(sys.argv):
		try:
			data.append(int(sys.argv[ci]))
		except:
			break
#		sys.argv.pop(ci)
		ci += 1
	if expected > 0 and len(data) != expected:
		print "mopicli. Bad input for " + c + "."
		sys.exit(1)
	return data

if len(sys.argv) == 1:
	shorthelp()
	sys.exit(0)

if '-h' in sys.argv:
	shorthelp()
	print ""
	help()
	sys.exit(0)

sys.argv.pop(0) # remove calling name...
# check that all the commands given are valid
for arg in sys.argv:
	if not arg.isdigit() and not arg in commands:
		print "mopicli. Unknown option: " + arg
		sys.exit(1)

if mopiapi.getApiVersion() != APIVERSION:
	print "mopicli. Expected API version %0.1f, got %0.1f instead." % (APIVERSION, mopiapi.getApiVersion())
	sys.exit(1)

if '-e' in sys.argv:
	sys.argv.extend(['-fv', '-sn', '-s', '-sv', '-v', '-v1', '-v2', '-rc', '-rc1', '-rc2', '-rpon', '-rs'])

status = 0
try:
	if '-i' not in sys.argv:
		mymopi = mopiapi.mopiapi()

	for ind,arg in enumerate(commands):
		if arg in sys.argv:
			par = readInts(arg, parameters[ind])

			if '-i' == arg:
				mymopi = mopiapi.mopiapi(par[0])

			if '-fv' == arg:
				data = mymopi.getFirmwareVersion()
				print '%i.%02i' % (data[0], data[1])

			if '-sn' == arg:
				print mymopi.getSerialNumber()


			if '-s' == arg:
				status = mopiapi.status(mymopi.getStatus())
				print status.getByte()

			if '-sv' == arg:
				if status == 0:
					status = mopiapi.status(mymopi.getStatus())
				print status.StatusDetail()

			if '-v' == arg:
				print mymopi.getVoltage()
			if '-v1' == arg:
				print mymopi.getVoltage(1)
			if '-v2' == arg:
				print mymopi.getVoltage(2)


			if '-rc' == arg:
				print ' '.join(map(str, mymopi.readConfig()))
			if '-rc1' == arg:
				print ' '.join(map(str, mymopi.readConfig(1)))
			if '-rc2' == arg:
				print ' '.join(map(str, mymopi.readConfig(2)))

			if '-rpon' == arg:
				print mymopi.getPowerOnDelay()

			if '-rs' == arg:
				print mymopi.getShutdownDelay()


			if '-wc' == arg:
				mymopi.writeConfig(par)
			if '-wc1' == arg:
				mymopi.writeConfig(par, 1)
			if '-wc2' == arg:
				mymopi.writeConfig(par, 2)

			if '-wpon' == arg:
				mymopi.setPowerOnDelay(par[0])

			if '-ws' == arg:
				mymopi.setShutdownDelay(par[0])

except IOError as e:
	if e.errno == errno.EACCES:
		print "mopicli. Permission denied." # add something about i2c bus
	elif e.errno == errno.EIO:
		print "mopicli. Communication error. Check bus? Check connection?"
	elif e.errno == errno.ECOMM:
		print "mopicli. Failed to write configuration."
		sys.exit(2)
	else:
		print "mopicli. " + e.strerror
	sys.exit(1)
except OSError as e:
	print "mopicli. " + e.strerror
	sys.exit(1)
